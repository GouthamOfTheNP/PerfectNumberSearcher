# Perfect Number Network - Nginx Reverse Proxy Configuration
# Copy to: /etc/nginx/sites-available/perfectnet
# Enable with: sudo ln -s /etc/nginx/sites-available/perfectnet /etc/nginx/sites-enabled/
# Test config: sudo nginx -t
# Reload: sudo systemctl reload nginx

# HTTP Server (redirects to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name perfectnet.example.com;

    # Redirect all HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS Server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name perfectnet.example.com;

    # SSL Certificate (use Let's Encrypt)
    # ssl_certificate /etc/letsencrypt/live/perfectnet.example.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/perfectnet.example.com/privkey.pem;
    
    # For testing without SSL, comment out the above and use:
    # ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    # ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    # SSL Configuration (Mozilla Intermediate)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Logging
    access_log /var/log/nginx/perfectnet_access.log;
    error_log /var/log/nginx/perfectnet_error.log;

    # API Endpoints (Flask Server)
    location /api/ {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts (important for long computations)
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
        
        # Buffering
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Dashboard (Flask Dashboard)
    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (if needed in future)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint (no auth required)
    location /health {
        proxy_pass http://127.0.0.1:8080/health;
        access_log off;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# =============================================================================
# Rate Limiting Configuration (optional, add to http block in nginx.conf)
# =============================================================================
#
# limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=dashboard_limit:10m rate=30r/s;
#
# Then add to location blocks:
# location /api/ {
#     limit_req zone=api_limit burst=20 nodelay;
#     ...
# }
#
# location / {
#     limit_req zone=dashboard_limit burst=50 nodelay;
#     ...
# }

# =============================================================================
# Let's Encrypt SSL Certificate Setup
# =============================================================================
#
# 1. Install certbot:
#    sudo apt install certbot python3-certbot-nginx
#
# 2. Get certificate (automatic nginx configuration):
#    sudo certbot --nginx -d perfectnet.example.com
#
# 3. Auto-renewal is set up automatically, test with:
#    sudo certbot renew --dry-run
#
# 4. Certificate will be at:
#    /etc/letsencrypt/live/perfectnet.example.com/fullchain.pem
#    /etc/letsencrypt/live/perfectnet.example.com/privkey.pem

# =============================================================================
# Testing Configuration
# =============================================================================
#
# 1. Test without SSL first:
#    - Comment out SSL certificate lines
#    - Use only 'listen 80' instead of 443
#
# 2. Test configuration:
#    sudo nginx -t
#
# 3. Reload nginx:
#    sudo systemctl reload nginx
#
# 4. Check logs:
#    sudo tail -f /var/log/nginx/perfectnet_access.log
#    sudo tail -f /var/log/nginx/perfectnet_error.log
#
# 5. Test endpoints:
#    curl http://perfectnet.example.com/api/health
#    curl http://perfectnet.example.com/

# =============================================================================
# Firewall Configuration
# =============================================================================
#
# Allow HTTP and HTTPS:
#    sudo ufw allow 'Nginx Full'
#
# Or manually:
#    sudo ufw allow 80/tcp
#    sudo ufw allow 443/tcp
#
# Block direct access to Flask ports (optional):
#    sudo ufw deny 5000/tcp
#    sudo ufw deny 8080/tcp
