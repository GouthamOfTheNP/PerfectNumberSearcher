# perfectnet-server.service
# Perfect Number Network Server - Systemd Service Unit
# 
# This service file supports multiple deployment scenarios:
# - Local development
# - Production with nginx reverse proxy
# - Cloud deployments (AWS/GCP/Azure)
# - Behind load balancers
#
# INSTALLATION:
# 1. Copy to: /etc/systemd/system/perfectnet-server.service
# 2. Edit the paths and configuration below for your setup
# 3. Enable and start:
#    sudo systemctl daemon-reload
#    sudo systemctl enable perfectnet-server
#    sudo systemctl start perfectnet-server
#    sudo systemctl status perfectnet-server

[Unit]
Description=Perfect Number Network Server (Flask REST API)
Documentation=https://github.com/yourrepo/perfectnet
After=network-online.target
Wants=network-online.target

# Optional: If you have a separate database service
# After=postgresql.service mysql.service
# Wants=postgresql.service mysql.service

[Service]
Type=simple

# =============================================================================
# USER AND GROUP CONFIGURATION
# =============================================================================
# Run as dedicated user for security (recommended for production)
# Create user with: sudo useradd -r -s /bin/false perfectnet
User=perfectnet
Group=perfectnet

# Alternative: Run as your user (for development)
# User=yourusername
# Group=yourusername

# =============================================================================
# PATH CONFIGURATION - EDIT THESE FOR YOUR SETUP
# =============================================================================
# Directory containing the Python files
# Examples:
#   /opt/perfectnet (production)
#   /home/user/perfectnet (development)
#   /srv/perfectnet (alternative production)
WorkingDirectory=/opt/perfectnet

# Python virtual environment path
# If using venv: /opt/perfectnet/venv/bin
# If using conda: /home/user/miniconda3/envs/perfectnet/bin
# If using system Python: /usr/bin (not recommended)
Environment="PATH=/opt/perfectnet/venv/bin:/usr/local/bin:/usr/bin:/bin"

# Alternative: Use absolute path to Python
# Environment="PYTHON=/opt/perfectnet/venv/bin/python"

# =============================================================================
# SERVER CONFIGURATION - EDIT THESE FOR YOUR DEPLOYMENT
# =============================================================================

# Scenario 1: Behind nginx reverse proxy (RECOMMENDED FOR PRODUCTION)
# Listen on localhost only, nginx forwards requests
ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/server.py --host 127.0.0.1 --port 5000 --db /var/lib/perfectnet/perfectnet.db

# Scenario 2: Direct access (development or local network)
# Listen on all interfaces, no reverse proxy
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/server.py --host 0.0.0.0 --port 5000 --db /var/lib/perfectnet/perfectnet.db

# Scenario 3: Custom database location
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/server.py --host 127.0.0.1 --port 5000 --db /data/perfectnet/perfectnet.db

# Scenario 4: Different port (e.g., behind load balancer)
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/server.py --host 127.0.0.1 --port 8000 --db /var/lib/perfectnet/perfectnet.db

# Scenario 5: Cloud with environment variables
# Environment="SERVER_HOST=0.0.0.0"
# Environment="SERVER_PORT=5000"
# Environment="DB_PATH=/var/lib/perfectnet/perfectnet.db"
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/server.py --host ${SERVER_HOST} --port ${SERVER_PORT} --db ${DB_PATH}

# =============================================================================
# ADDITIONAL ENVIRONMENT VARIABLES (Optional)
# =============================================================================

# Flask environment (development or production)
Environment="FLASK_ENV=production"

# Python optimization (remove assert statements, etc.)
Environment="PYTHONOPTIMIZE=1"

# Disable Python bytecode cache
# Environment="PYTHONDONTWRITEBYTECODE=1"

# Python unbuffered output (see logs immediately)
Environment="PYTHONUNBUFFERED=1"

# Set timezone
# Environment="TZ=America/New_York"

# =============================================================================
# RESTART POLICY
# =============================================================================
# Always restart on failure
Restart=always
RestartSec=10

# Restart on success, failure, watchdog, and abort
# Restart=on-failure
# RestartSec=5

# Rate limiting: Don't restart more than 5 times in 10 minutes
StartLimitInterval=600
StartLimitBurst=5

# Give up and enter failed state after exceeding limit
# StartLimitAction=none

# =============================================================================
# RESOURCE LIMITS
# =============================================================================

# Maximum number of open files
LimitNOFILE=65536

# Maximum locked memory (for large computations)
# LimitMEMLOCK=infinity

# Maximum memory usage (prevents runaway processes)
# 2GB for moderate workload, increase if needed
MemoryLimit=2G
# MemoryLimit=4G  # For larger deployments
# MemoryLimit=8G  # For very large deployments

# CPU quota (optional - limit CPU usage)
# CPUQuota=80%  # Use max 80% of one CPU core
# CPUQuota=200%  # Use max 2 full CPU cores

# Maximum number of processes/threads
# LimitNPROC=4096

# =============================================================================
# SECURITY HARDENING
# =============================================================================

# Prevent privilege escalation
NoNewPrivileges=true

# Private /tmp directory
PrivateTmp=true

# Protect system directories
ProtectSystem=strict
ProtectHome=true

# Allow writing to specific directories
ReadWritePaths=/var/lib/perfectnet
# ReadWritePaths=/var/lib/perfectnet /var/log/perfectnet

# Read-only access to application directory
ReadOnlyPaths=/opt/perfectnet
# ReadOnlyPaths=/opt/perfectnet /etc/perfectnet

# Restrict network access (remove if you need outbound connections)
# RestrictAddressFamilies=AF_INET AF_INET6

# Disable system calls not needed
# SystemCallFilter=@system-service
# SystemCallFilter=~@privileged @resources

# Prevent access to kernel variables
# ProtectKernelTunables=true
# ProtectKernelModules=true
# ProtectControlGroups=true

# Restrict real-time scheduling
# RestrictRealtime=true

# Prevent access to other user's files
# PrivateUsers=true

# =============================================================================
# LOGGING
# =============================================================================

# Log to systemd journal
StandardOutput=journal
StandardError=journal
SyslogIdentifier=perfectnet-server

# Alternative: Log to files
# StandardOutput=append:/var/log/perfectnet/server.log
# StandardError=append:/var/log/perfectnet/server-error.log

# =============================================================================
# PROCESS MANAGEMENT
# =============================================================================

# Kill mode: control+process = kill main process and all children
KillMode=mixed

# Timeout before force kill
TimeoutStopSec=30

# Send SIGTERM first, then SIGKILL
KillSignal=SIGTERM

# =============================================================================
# WORKING DIRECTORY PERMISSIONS
# =============================================================================
# Ensure the service can access required directories
# These are run before the service starts

# Create database directory if it doesn't exist
ExecStartPre=/bin/mkdir -p /var/lib/perfectnet
ExecStartPre=/bin/chown perfectnet:perfectnet /var/lib/perfectnet

# Alternative: Create log directory
# ExecStartPre=/bin/mkdir -p /var/log/perfectnet
# ExecStartPre=/bin/chown perfectnet:perfectnet /var/log/perfectnet

# =============================================================================
# HEALTH CHECKS (Optional - requires systemd 240+)
# =============================================================================
# Watchdog will restart service if it doesn't respond
# WatchdogSec=60s

# =============================================================================
# NOTIFICATION (Optional)
# =============================================================================
# Notify systemd when service is ready (requires code changes)
# Type=notify
# NotifyAccess=main

[Install]
WantedBy=multi-user.target

# Alternative: Start on network target
# WantedBy=network-online.target

# =============================================================================
# QUICK REFERENCE COMMANDS
# =============================================================================
#
# Reload configuration:
#   sudo systemctl daemon-reload
#
# Enable auto-start on boot:
#   sudo systemctl enable perfectnet-server
#
# Disable auto-start:
#   sudo systemctl disable perfectnet-server
#
# Start service:
#   sudo systemctl start perfectnet-server
#
# Stop service:
#   sudo systemctl stop perfectnet-server
#
# Restart service:
#   sudo systemctl restart perfectnet-server
#
# Check status:
#   sudo systemctl status perfectnet-server
#
# View logs (follow):
#   sudo journalctl -u perfectnet-server -f
#
# View logs (last 100 lines):
#   sudo journalctl -u perfectnet-server -n 100
#
# View logs (since boot):
#   sudo journalctl -u perfectnet-server -b
#
# View logs (specific time):
#   sudo journalctl -u perfectnet-server --since "2024-01-01 00:00:00"
#
# Clear logs:
#   sudo journalctl --vacuum-time=7d
#
# Check for errors:
#   sudo journalctl -u perfectnet-server -p err
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Service won't start:
# - Check logs: sudo journalctl -u perfectnet-server -n 50
# - Verify paths in WorkingDirectory and ExecStart
# - Check file permissions: ls -la /opt/perfectnet
# - Verify Python path: /opt/perfectnet/venv/bin/python --version
# - Test manually: sudo -u perfectnet /opt/perfectnet/venv/bin/python /opt/perfectnet/server.py
#
# Permission denied errors:
# - Ensure user 'perfectnet' exists: id perfectnet
# - Check directory ownership: ls -la /opt/perfectnet /var/lib/perfectnet
# - Fix ownership: sudo chown -R perfectnet:perfectnet /opt/perfectnet /var/lib/perfectnet
#
# Port already in use:
# - Check what's using the port: sudo netstat -tlnp | grep 5000
# - Kill conflicting process: sudo kill <PID>
# - Or use different port in ExecStart
#
# Memory issues:
# - Check memory usage: systemctl status perfectnet-server
# - Increase MemoryLimit in this file
# - Monitor: watch -n 1 'systemctl status perfectnet-server | grep Memory'
#
# Service keeps restarting:
# - Check logs for errors: sudo journalctl -u perfectnet-server -f
# - Increase RestartSec to prevent rapid restarts
# - Check StartLimitBurst and StartLimitInterval
#
# Can't connect to service:
# - Verify it's running: sudo systemctl status perfectnet-server
# - Check listening ports: sudo netstat -tlnp | grep python
# - Test locally: curl http://127.0.0.1:5000/api/health
# - Check firewall: sudo ufw status (or) sudo firewall-cmd --list-all
#
# =============================================================================
# DEPLOYMENT SCENARIOS
# =============================================================================
#
# Local Development:
#   WorkingDirectory=/home/user/perfectnet
#   User=youruser
#   ExecStart=/home/user/perfectnet/venv/bin/python /home/user/perfectnet/server.py --host 127.0.0.1 --port 5000
#
# Production with Nginx:
#   WorkingDirectory=/opt/perfectnet
#   User=perfectnet
#   ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/server.py --host 127.0.0.1 --port 5000 --db /var/lib/perfectnet/perfectnet.db
#
# AWS EC2:
#   Same as production, ensure security group allows inbound traffic
#   Consider using AWS Systems Manager for configuration
#
# Docker Container (not recommended, use native):
#   Not typically needed - systemd manages the process directly
#
# Behind Load Balancer:
#   Use health check endpoint: /api/health
#   May need to bind to specific IP: --host 10.0.1.100
#
# Multiple Instances:
#   Copy this file to perfectnet-server@.service (note the @)
#   Use different ports: ExecStart=... --port %i
#   Start with: sudo systemctl start perfectnet-server@5000
