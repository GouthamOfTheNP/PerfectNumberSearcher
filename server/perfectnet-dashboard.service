# perfectnet-dashboard.service
# Perfect Number Network Dashboard - Systemd Service Unit
# 
# This service file supports multiple deployment scenarios:
# - Local development
# - Production with nginx reverse proxy
# - Cloud deployments (AWS/GCP/Azure)
# - Standalone or behind load balancers
#
# INSTALLATION:
# 1. Copy to: /etc/systemd/system/perfectnet-dashboard.service
# 2. Edit the paths and configuration below for your setup
# 3. Enable and start:
#    sudo systemctl daemon-reload
#    sudo systemctl enable perfectnet-dashboard
#    sudo systemctl start perfectnet-dashboard
#    sudo systemctl status perfectnet-dashboard

[Unit]
Description=Perfect Number Network Dashboard (Flask Web Interface)
Documentation=https://github.com/yourrepo/perfectnet
After=network-online.target perfectnet-server.service
Wants=network-online.target
Requires=perfectnet-server.service

# Ensure server starts first
BindsTo=perfectnet-server.service

[Service]
Type=simple

# =============================================================================
# USER AND GROUP CONFIGURATION
# =============================================================================
# Run as dedicated user for security (recommended for production)
User=perfectnet
Group=perfectnet

# Alternative: Run as your user (for development)
# User=yourusername
# Group=yourusername

# =============================================================================
# PATH CONFIGURATION - EDIT THESE FOR YOUR SETUP
# =============================================================================
# Directory containing the Python files
WorkingDirectory=/opt/perfectnet

# Python virtual environment path
Environment="PATH=/opt/perfectnet/venv/bin:/usr/local/bin:/usr/bin:/bin"

# =============================================================================
# DASHBOARD CONFIGURATION - EDIT THESE FOR YOUR DEPLOYMENT
# =============================================================================

# Scenario 1: Behind nginx reverse proxy (RECOMMENDED FOR PRODUCTION)
# Dashboard listens on localhost, nginx forwards requests
# API URL points to server on localhost
ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 127.0.0.1 --port 8080 --api-url http://127.0.0.1:5000

# Scenario 2: Direct access on local network
# Dashboard listens on all interfaces, API accessed via server
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 0.0.0.0 --port 8080 --api-url http://localhost:5000

# Scenario 3: Public domain with HTTPS (behind nginx)
# Dashboard on localhost, API URL uses public domain
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 127.0.0.1 --port 8080 --api-url https://perfectnet.example.com

# Scenario 4: DuckDNS setup (behind nginx)
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 127.0.0.1 --port 8080 --api-url https://myserver.duckdns.org

# Scenario 5: Different port configuration
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 127.0.0.1 --port 3000 --api-url http://127.0.0.1:5000

# Scenario 6: Server on different machine (distributed setup)
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 0.0.0.0 --port 8080 --api-url http://192.168.1.100:5000

# Scenario 7: Cloud with internal load balancer
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 127.0.0.1 --port 8080 --api-url http://internal-lb.us-east-1.elb.amazonaws.com

# Scenario 8: Docker/Container environment
# ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 0.0.0.0 --port 8080 --api-url http://perfectnet-api:5000

# =============================================================================
# ADDITIONAL ENVIRONMENT VARIABLES (Optional)
# =============================================================================

# Flask environment
Environment="FLASK_ENV=production"

# Python optimization
Environment="PYTHONOPTIMIZE=1"

# Python unbuffered output
Environment="PYTHONUNBUFFERED=1"

# Set timezone
# Environment="TZ=America/New_York"

# Custom API URL (alternative to --api-url flag)
# Environment="API_URL=http://127.0.0.1:5000"

# =============================================================================
# RESTART POLICY
# =============================================================================
# Always restart on failure
Restart=always
RestartSec=10

# Rate limiting: Don't restart more than 5 times in 10 minutes
StartLimitInterval=600
StartLimitBurst=5

# =============================================================================
# RESOURCE LIMITS
# =============================================================================

# Maximum number of open files
LimitNOFILE=4096

# Maximum memory usage (dashboard is lighter than server)
# 512MB should be sufficient for most deployments
MemoryLimit=512M
# MemoryLimit=1G  # For larger deployments with many concurrent users

# CPU quota (optional - limit CPU usage)
# CPUQuota=50%  # Use max 50% of one CPU core

# =============================================================================
# SECURITY HARDENING
# =============================================================================

# Prevent privilege escalation
NoNewPrivileges=true

# Private /tmp directory
PrivateTmp=true

# Protect system directories
ProtectSystem=strict
ProtectHome=true

# Read-only access to application directory
ReadOnlyPaths=/opt/perfectnet

# Dashboard doesn't need write access to most directories
# Only needs to read the application files

# Restrict network access (if needed)
# RestrictAddressFamilies=AF_INET AF_INET6

# =============================================================================
# LOGGING
# =============================================================================

# Log to systemd journal
StandardOutput=journal
StandardError=journal
SyslogIdentifier=perfectnet-dashboard

# Alternative: Log to files
# StandardOutput=append:/var/log/perfectnet/dashboard.log
# StandardError=append:/var/log/perfectnet/dashboard-error.log

# =============================================================================
# PROCESS MANAGEMENT
# =============================================================================

# Kill mode: control+process = kill main process and all children
KillMode=mixed

# Timeout before force kill
TimeoutStopSec=20

# Send SIGTERM first, then SIGKILL
KillSignal=SIGTERM

# =============================================================================
# STARTUP DEPENDENCIES (Optional)
# =============================================================================
# Wait for server to be ready before starting dashboard
# Requires custom health check script

# ExecStartPre=/usr/local/bin/wait-for-server.sh http://127.0.0.1:5000/api/health 60

# Simple wait alternative (wait 5 seconds for server to start)
ExecStartPre=/bin/sleep 5

# =============================================================================
# HEALTH CHECKS (Optional - requires systemd 240+)
# =============================================================================
# Watchdog will restart service if it doesn't respond
# WatchdogSec=60s

[Install]
WantedBy=multi-user.target

# =============================================================================
# QUICK REFERENCE COMMANDS
# =============================================================================
#
# Reload configuration:
#   sudo systemctl daemon-reload
#
# Enable auto-start on boot:
#   sudo systemctl enable perfectnet-dashboard
#
# Disable auto-start:
#   sudo systemctl disable perfectnet-dashboard
#
# Start service:
#   sudo systemctl start perfectnet-dashboard
#
# Stop service:
#   sudo systemctl stop perfectnet-dashboard
#
# Restart service:
#   sudo systemctl restart perfectnet-dashboard
#
# Check status:
#   sudo systemctl status perfectnet-dashboard
#
# View logs (follow):
#   sudo journalctl -u perfectnet-dashboard -f
#
# View logs (last 100 lines):
#   sudo journalctl -u perfectnet-dashboard -n 100
#
# View both services:
#   sudo journalctl -u perfectnet-server -u perfectnet-dashboard -f
#
# =============================================================================
# STARTING BOTH SERVICES TOGETHER
# =============================================================================
#
# Start both at once:
#   sudo systemctl start perfectnet-server perfectnet-dashboard
#
# Stop both at once:
#   sudo systemctl stop perfectnet-dashboard perfectnet-server
#
# Restart both at once:
#   sudo systemctl restart perfectnet-server perfectnet-dashboard
#
# Enable both at once:
#   sudo systemctl enable perfectnet-server perfectnet-dashboard
#
# Check status of both:
#   sudo systemctl status perfectnet-*
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Dashboard won't start:
# - Check if server is running: sudo systemctl status perfectnet-server
# - Check logs: sudo journalctl -u perfectnet-dashboard -n 50
# - Verify API URL is correct and reachable
# - Test API manually: curl http://127.0.0.1:5000/api/health
# - Verify paths in WorkingDirectory and ExecStart
#
# Can't access dashboard:
# - Verify it's running: sudo systemctl status perfectnet-dashboard
# - Check listening ports: sudo netstat -tlnp | grep 8080
# - Test locally: curl http://127.0.0.1:8080/health
# - Check firewall rules
# - If behind nginx, check nginx config and status
#
# Dashboard shows API errors:
# - Check server logs: sudo journalctl -u perfectnet-server -n 50
# - Verify API URL in ExecStart matches server configuration
# - Test API connectivity: curl http://127.0.0.1:5000/api/stats/server
# - Check CORS configuration in server.py
#
# Dashboard not updating:
# - Check browser console for JavaScript errors
# - Verify API endpoints are responding: curl http://127.0.0.1:5000/api/assignments
# - Check network connectivity between dashboard and server
# - Clear browser cache and reload
#
# Permission denied errors:
# - Ensure user 'perfectnet' exists: id perfectnet
# - Check directory ownership: ls -la /opt/perfectnet
# - Fix ownership: sudo chown -R perfectnet:perfectnet /opt/perfectnet
#
# Port already in use:
# - Check what's using the port: sudo netstat -tlnp | grep 8080
# - Kill conflicting process: sudo kill <PID>
# - Or use different port in ExecStart
#
# Service depends on server but starts anyway:
# - This is expected - Requires= creates a dependency but allows start
# - Use BindsTo= for stricter coupling (already included above)
# - Check: systemctl list-dependencies perfectnet-dashboard
#
# =============================================================================
# DEPLOYMENT SCENARIOS
# =============================================================================
#
# Local Development:
#   WorkingDirectory=/home/user/perfectnet
#   User=youruser
#   ExecStart=/home/user/perfectnet/venv/bin/python /home/user/perfectnet/dashboard.py --host 127.0.0.1 --port 8080 --api-url http://127.0.0.1:5000
#
# Production with Nginx (Same Machine):
#   WorkingDirectory=/opt/perfectnet
#   User=perfectnet
#   ExecStart=/opt/perfectnet/venv/bin/python /opt/perfectnet/dashboard.py --host 127.0.0.1 --port 8080 --api-url http://127.0.0.1:5000
#   Access via: https://yourdomain.com (nginx handles SSL)
#
# Production with Nginx and Public Domain:
#   ExecStart=... --api-url https://api.yourdomain.com
#   OR if same domain: --api-url https://yourdomain.com
#   Nginx routes /api/ to server, / to dashboard
#
# DuckDNS Setup:
#   ExecStart=... --api-url https://myserver.duckdns.org
#   Ensure DuckDNS is updating your IP
#   Let's Encrypt for SSL via nginx
#
# AWS EC2 with Domain:
#   ExecStart=... --api-url https://perfectnet.example.com
#   Security group allows 80/443
#   Route53 points to Elastic IP
#
# AWS with Internal Load Balancer:
#   ExecStart=... --api-url http://internal-lb.region.elb.amazonaws.com
#   Dashboard and server in same VPC
#   ALB routes to server instances
#
# Distributed Setup (Dashboard and Server on Different Machines):
#   Machine 1 (Server):
#     - Run perfectnet-server.service with --host 0.0.0.0
#   Machine 2 (Dashboard):
#     - ExecStart=... --api-url http://192.168.1.100:5000
#     - Or use domain/load balancer URL
#   Ensure firewall allows communication
#
# Docker/Kubernetes:
#   ExecStart=... --host 0.0.0.0 --api-url http://perfectnet-api:5000
#   Use service discovery for API URL
#   Container orchestrator manages lifecycle
#
# Behind Cloudflare:
#   ExecStart=... --api-url https://perfectnet.example.com
#   Cloudflare proxy enabled (orange cloud)
#   SSL mode: Full or Full (strict)
#   API calls go through Cloudflare
#
# Multiple Dashboard Instances (Load Balanced):
#   Same config on multiple machines
#   Load balancer in front
#   All point to same API (server or API load balancer)
#
# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================
#
# Custom Health Check Script:
# Create /usr/local/bin/wait-for-server.sh:
#   #!/bin/bash
#   URL=$1
#   TIMEOUT=$2
#   for i in $(seq 1 $TIMEOUT); do
#       if curl -sf "$URL" > /dev/null; then
#           exit 0
#       fi
#       sleep 1
#   done
#   exit 1
#
# Make executable: sudo chmod +x /usr/local/bin/wait-for-server.sh
# Use in ExecStartPre as shown above
#
# Environment File:
# Create /etc/perfectnet/dashboard.env:
#   API_URL=http://127.0.0.1:5000
#   FLASK_ENV=production
#   LOG_LEVEL=INFO
#
# Load in service:
#   EnvironmentFile=/etc/perfectnet/dashboard.env
#
# Multiple Instances on Same Machine:
# Create perfectnet-dashboard@.service (note the @):
#   ExecStart=... --port %i --api-url ...
# Start with: sudo systemctl start perfectnet-dashboard@8080
#
# =============================================================================
# MONITORING AND MAINTENANCE
# =============================================================================
#
# Monitor resource usage:
#   systemctl status perfectnet-dashboard
#   top -p $(pgrep -f dashboard.py)
#
# Watch logs in real-time:
#   sudo journalctl -u perfectnet-dashboard -f --output=cat
#
# Check memory usage over time:
#   watch -n 5 'systemctl status perfectnet-dashboard | grep Memory'
#
# Analyze performance:
#   systemd-analyze blame | grep perfectnet
#   systemd-analyze critical-chain perfectnet-dashboard
#
# Backup configuration:
#   sudo cp /etc/systemd/system/perfectnet-* /backup/location/
#
# =============================================================================
# INTEGRATION WITH OTHER SERVICES
# =============================================================================
#
# With PostgreSQL:
#   After=postgresql.service perfectnet-server.service
#   Wants=postgresql.service
#
# With Redis (for caching):
#   After=redis.service perfectnet-server.service
#   Wants=redis.service
#
# With Monitoring (Prometheus, etc.):
#   Expose metrics endpoint in dashboard.py
#   Configure scraping in Prometheus
#
# =============================================================================
# CLEANUP COMMANDS
# =============================================================================
#
# Stop and disable:
#   sudo systemctl stop perfectnet-dashboard
#   sudo systemctl disable perfectnet-dashboard
#
# Remove service file:
#   sudo rm /etc/systemd/system/perfectnet-dashboard.service
#   sudo systemctl daemon-reload
#
# Clean logs:
#   sudo journalctl --vacuum-time=7d
#   sudo journalctl --vacuum-size=100M
